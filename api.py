# coding: utf-8
# Импортирует поддержку UTF-8.
from __future__ импортировать  unicode_literals

# Импортируем модули для работы с JSON и логами.
импортировать  json
импорт  журнала

# Импортируем подмодули Flask для запуска веб-сервиса.
от  колба  импорта  Колба , запроса
app  =  Flask ( __name__ )


ведение журнала . basicConfig ( уровень = ведение журнала . DEBUG )

# Хранилище данных о сессиях.
sessionStorage  = {}

# Задаем параметры приложения Flask.
@ app . route ( "/" , методы = [ 'POST' ])

def  main ():
# Функция получает тело запроса и возвращает ответ.
    ведение журнала . info ( 'Запрос:% r' , запрос . json )

    response  = {
        «версия» : запрос . json [ 'версия' ],
        «сессия» : запрос . json [ 'сеанс' ],
        "response" : {
            "end_session" : ложь
        }
    }

    handle_dialog ( запрос . json , ответ )

    ведение журнала . info ( 'Ответ:% r' , ответ )

    вернуть  json . свалки (
        ответ ,
        sure_ascii = Ложь ,
        отступ = 2
    )

# Функция для непосредственной обработки диалога.
def  handle_dialog ( req , res ):
    user_id  =  req [ 'сеанс' ] [ 'user_id' ]

    если  req [ 'сеанс' ] [ 'новый' ]:
        # Это новый пользователь.
        # Инициализируем сессию и поприветствуем его.

        sessionStorage [ user_id ] = {
            'предлагает' : [
                "Не хочу". ,
                "Не буду." ,
                "Отстань!" ,
            ]
        }

        res [ 'response' ] [ 'text' ] =  'Привет! Купи слона! '
        res [ 'ответ' ] [ 'кнопки' ] =  get_suggests ( user_id )
        возвращение

    # Обрабатываем ответ пользователя.
    если  req [ 'запрос' ] [ 'исходное_уттеранс' ]. нижний () в [
        'ладно' ,
        'куплю' ,
        'покупаю' ,
        'хорошо' ,
    ]:
        # Пользователь согласился, прощаемся.
        res [ 'response' ] [ 'text' ] =  'Слона можно найти на Яндекс.Маркете!'
        возвращение

    # Если нет, то убеждаем его купить слона!
    res [ 'response' ] [ 'text' ] =  'Все говорят "% s", а ты купи слона!'  % (
        req [ 'запрос' ] [ 'исходное_уттеранс' ]
    )
    res [ 'ответ' ] [ 'кнопки' ] =  get_suggests ( user_id )

# Функция возвращает две подсказки для ответа.
def  get_suggests ( user_id ):
    session  =  sessionStorage [ user_id ]

    # Выбираем две первые подсказки из массива.
    предлагает  = [
        { 'title' : предлагать , 'скрывать' : верно }
        для  предложения  в  сеансе [ 'предлагает' ] [: 2 ]
    ]

    # Убираем первую подсказку, чтобы подсказки менялись каждый раз.
    сессия [ 'предлагает' ] =  сессия [ 'предлагает' ] [ 1 :]
    sessionStorage [ user_id ] =  сеанс

    # Если осталась только одна подсказка, предлагаем подсказку
    # со ссылкой на Яндекс.Маркет.
    если  len ( предлагает ) <  2 :
        предлагает . append ({
            "title" : "Ладно" ,
            "url" : "https://market.yandex.ru/search?text=слон" ,
            "hide" : Верно
        })

    возврат  предлагает
